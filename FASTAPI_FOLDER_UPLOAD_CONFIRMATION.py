# üîß FastAPI Backend: Folder Upload Signature Confirmation

## B. FastAPI Backend: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Signature

# ‚úÖ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: input_files: List[UploadFile] = File(...) **‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

## Current Working Signature ‡πÉ‡∏ô /home/user/webapp/backend/main.py:

@app.post("/api/analyze")
async def analyze_similarity(
    input_files: List[UploadFile] = File(default=[], description="Input files to analyze (max 5 files)"),
    database_file: UploadFile = File(..., description="ZIP file containing database documents"),
    k_neighbors: int = Form(3, description="Number of top neighbors to find"),
    dup_threshold: float = Form(0.90, description="Threshold for duplicate classification"),
    similar_threshold: float = Form(0.60, description="Threshold for similar classification"),
    text_input: Optional[str] = Form(None, description="Optional direct text input"),
    novel_names: Optional[str] = Form(None, description="Optional comma-separated names for input files/text")
):

## ‚úÖ Why This Signature Works for Folder Uploads:

1. **List[UploadFile]**: FastAPI automatically handles multiple files from FormData
2. **webkitRelativePath**: Preserved in `file.filename` automatically
3. **FormData compatibility**: Works with both single files and folder selections
4. **No additional parameters needed**: FastAPI parses multipart/form-data correctly

## ‚úÖ Backend Processing of Folder Files:

# Code ‡πÉ‡∏ô main.py line 225-248:

# 1. ‚úÖ ‡∏£‡∏±‡∏ö original filename ‡∏û‡∏£‡πâ‡∏≠‡∏° path
original_filename = file.filename  # ‡πÄ‡∏ä‡πà‡∏ô "stories/fantasy_story.txt"
clean_filename = Path(original_filename).name  # ‡πÄ‡∏ä‡πà‡∏ô "fantasy_story.txt"

# 2. ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if original_filename != clean_filename:
    # This is from folder upload, preserve some path info
    txt_filename = f"{Path(original_filename).parent.name}_{Path(clean_filename).stem}.txt"
    # ‡πÄ‡∏ä‡πà‡∏ô: "stories_fantasy_story.txt"
else:
    txt_filename = f"{Path(clean_filename).stem}.txt"
    # ‡πÄ‡∏ä‡πà‡∏ô: "fantasy_story.txt"

## ‚úÖ Test Result Confirmation:

# ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß - Status 200 Success:
{
  "processed_files": [
    "stories_fantasy_story.txt",      # ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå + ‡πÑ‡∏ü‡∏•‡πå
    "stories_romance_story.txt",      # ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå + ‡πÑ‡∏ü‡∏•‡πå 
    "documents_research_paper.txt",   # ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå + ‡πÑ‡∏ü‡∏•‡πå
    "documents_technical_manual.txt"  # ‚úÖ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå + ‡πÑ‡∏ü‡∏•‡πå
  ],
  "file_name_mapping": {
    "stories_fantasy_story.txt": "fantasy_story",
    "stories_romance_story.txt": "romance_story", 
    "documents_research_paper.txt": "research_paper",
    "documents_technical_manual.txt": "technical_manual"
  }
}

## ‚úÖ Conclusion:

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ `input_files: List[UploadFile] = File(...)` **‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:

1. ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (single file upload)
2. ‚úÖ ‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå (multiple file upload) 
3. ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (folder upload with webkitRelativePath)
4. ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô filename
5. ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

**‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç signature ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°!**